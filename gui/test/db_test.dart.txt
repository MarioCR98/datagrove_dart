import 'dart:convert';
import 'dart:io';

import 'package:datagrove/datagrove.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/services.dart';
import 'package:pawpaw_db/pawpaw_db.dart';
import 'package:pawpaw_db/plugin/us.ny/plugin.dart';
import 'package:uuid/uuid.dart';
import 'package:faker/faker.dart';

const testfile = "/Users/jimhurd/yaktemp/dg.db";

main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await build();
}

build() async {
  await File(testfile).delete();
  final dg = await openDatagrove(testfile, offline: true);
  final db = await openPawpaw(dg);
  await randomFamily2(db, 100);

  // write the json to a file
  db.prepare();
  await File(testfile + ".json").writeAsString(jsonEncode(db.toJson()));

  db.dispose();
  dg.dispose();
}

// updateIndex(Database db, Family f) {
//   db.execute("delete from student where familyId=?", [f.id]);
//   var stmt = db.prepare('''insert into
//       student(familyId,name, isfamily,district, status)
//       values(?,?,?,?,?)
//       ''');

//   stmt.execute([f.id, f.lastFirst, 'y', f.district.name, f.status]);
//   for (final o in f.students) {
//     stmt.execute([f.id, o.lastFirst, 'y', f.district.name, f.status]);
//   }
//   stmt.dispose();
// }

List<int> pickUniqueInt(int atMost, int outOf) {
  var temp = List<int>.generate(outOf, (e) => e).toList();
  if (atMost < outOf)
    return temp;
  else {
    temp.shuffle();
    return temp.sublist(0, atMost);
  }
}

List<T> pickUnique<T>(int atMost, List<T> from) {
  return pickUniqueInt(atMost, from.length).map((e) => from[e]).toList();
}

T pick1<T>(List<T> from) {
  return from[faker.randomGenerator.integer(from.length)];
}

randomFamily2(PawpawDb db, int count) async {
  // we are back to having multiple families in the database

  var path = '/Users/jimhurd/yaktemp/family.ppp';
  if (await File(path).exists()) {
    await File(path).delete();
  }

  var ny = NyRules();
  final ld = await ny.district();
  final pickDistrict = pickUnique((count / 30).ceil(), ld);

  District d;
  // we only need to save the unique ones.
  // this requires that we have a unique id though.
  // should have one anyway? xxx.ny

  var gr = db.db.group("capitalBoces");

  var tx = db.db.begin();
  tx.begin(gr); // defines will be granted.
  for (final o in pickDistrict) {
    tx.define('district', o.id, o, o);
  }
  for (int i = 0; i < count; i++) {
    var o = await randomFamily(pick1(pickDistrict), ny, "US", "NY");

    for (final st in o.student) {
      tx.define('student', st.id, st.summary, st);
      int ord = 0;
      for (final ad in o.supervisor) {
        tx.edge('student', st.id, 'taught-by', 'adult', ad.id);
      }

      // insert the district in a local list.
      // this can fail? or maybe use upsert for this.

    }
    for (final ad in o.supervisor) {
      tx.define('adult', ad.id, ad.summary, ad);
      tx.altid(ad.email, 'adult', ad.id);
      tx.altid(ad.phone, 'adult', ad.id);
    }
  }
  await tx.commit();
}

var uuid = const Uuid();
Future<Family> randomFamily(
    District d, JurisdictionRules pl, String country, String state) async {
  Future<Student> student() async {
    int grade = faker.randomGenerator.integer(13);
    //var gs = await pl.gradeSet(grade);

    var hours =
        List<int>.generate(4, (_) => faker.randomGenerator.integer(500));

    var subj = <String, Subject>{};
    var score = <String, String>{};

    // for (final o in gs.slot) {
    //   subj[o.id] = o.subject;
    //   for (int i = 0; i < 4; i++) {
    //     score["${o.id}.$i"] = "A";
    //   }
    // }

    return Student(
        id: uuid.v4(),
        grade: grade,
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        birth: DateTime.now().subtract(const Duration(days: 365 * 10)),
        subject: subj,
        testScore: '9',
        hours: hours);
  }

  final supervisor = Supervisor(
      id: uuid.v4(),
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      address: faker.address.streetAddress(),
      city: faker.address.city(),
      state: state,
      zip: faker.address.zipCode(),
      email: faker.internet.email(),
      country: country,
      phone: faker.randomGenerator.fromPattern(["(###)###-####"]));

  var st = List<Student>.empty(growable: true);
  for (int i = 0; i < 6; i++) {
    st.add(await student());
  }

  return Family(
    supervisor: [supervisor],
    student: st,
    district: d,
  );
}
