import 'dart:async';

import 'package:flutter/cupertino.dart';

abstract class DeltaNotifier2d<Snapshot, Delta> {
  filter(int x1, y1, x2, y2, {List<int>? inner});
}

abstract class DeltaNotifier1d<Snapshot, Delta> {
  filter(int x1, x2, {List<int>? inner});
}

// insert, delete is easier? copying ranges is more general, but how does the view
// even manage that?
class DimensionDeltaMeh {
  int dimension = 0;
  var map = List<List<int>>.empty();
}

// a snapshot has to give us (position, value) in some filtered range.
// we don't always have a key, sometimes the position is the key.
class Snapshot<T> {
  // we can have snapshots and inner snapshots.
  List<int> anchor = [];
  List<Snapshot<T>> children = [];
  List<T?> value = [];
  List<int> dimension = []; //
}

// if you return a future, the Delta controller will continue to aggregate changes
// until your future returns; it won't renotify you until the first change is complete
typedef Listener<S, D> = FutureOr<void> Function(S old, S newest, D delta);

class DeltaGridController<T, dT> {
  // only one listener per delta stream, make a new controller for each listener
  set listener(Listener<Snapshot<T>, DeltaList<dT>> f) {}
  // filter says what you will accept (maybe infinite)
  // we need the concept of an anchor. is that always x1? viewer could always reverse.
  filter(
      // count is more directly what we use to build the snap shot, but could just calculate?
      List<int> anchor, // e.g. x,y
      List<int> count, // max-x, max-y
      bool reverse, // anchor is min or anchor is max
      {List<int>? inner}) {} // access the nested scrollers.
}

// maybe position should be an object so we can keep it in the view?

class X extends StatefulWidget {
  @override
  State<X> createState() => _XState();
}

// we also need a nested transformation controller that can determine if you are pinching in a tile, or outer area. the nested transformation controller needs to share the layout of the grid,
// this seems hard to abstract.
// a transformation controller is a matrix4, but this is a multidimensional array of Matrix4? on top of that it needs to store the layout which is a multidimensional array of vec2? with padding?
// can we modifier interactiveviewer to animate in/out items?
class NestedTransformationController {}

class _XState extends State<X> {
  final controller = DeltaGridController<int, int>();
  final panZoom = TransformationController();

  init() {}
  // mostly gesture driven
  onChangeTransform() {}
  // mostly transaction driven
  onChange() {}

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    throw UnimplementedError();
  }
}
